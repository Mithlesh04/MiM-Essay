{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PhoneVerification","useState","otp","setOTP","input","useRef","useEffect","keydown","current","handleOnKeyDown","paste","handleOnPaste","e","arguments","originalKeyCode","keyCode","call","this","clipboardData","types","getData","ptext","parseInt","originalEvent","Typography","variant","align","Divider","style","marginTop","as","sx","color","marginBottom","Box","value","onChange","numInputs","ref","isInputNum","separator","containerStyle","justifyContent","inputStyle","shouldAutoFocus","display","p","m","bgcolor","blue","cursor","pt","Button","green","borderRadius","paddingLeft","paddingRight","size","App","open","setOpen","position","top","left","transform","width","boxShadow","onClick","Modal","onClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63559eea.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport OtpInput from 'react-otp-input';\nimport \"./app.scss\"\nimport { Typography, Divider, Button, Box , Modal  } from '@mui/material';\nimport { blue, green } from '@mui/material/colors';\n\n\n\n\nconst PhoneVerification=()=>{\n  const [otp, setOTP] = useState()\n  const input = useRef()\n\n\n  const handleChange = (otp) => {\n    setOTP(otp)\n  }\n\n  useEffect(() => {\n    const keydown = input.current.handleOnKeyDown\n    const paste = input.current.handleOnPaste\n    \n    input.current.handleOnKeyDown = function (e) {\n      arguments[0].originalKeyCode = e.keyCode\n      if (e.keyCode === 32) arguments[0].keyCode = 8\n      keydown.call(this, ...arguments)\n    }\n\n    input.current.handleOnPaste = function(e){\n      if(e && e.clipboardData && e.clipboardData.types && e.clipboardData.getData) {\n          let ptext = parseInt((e.originalEvent || e).clipboardData.getData('text/plain'))\n          if(ptext || ptext===0){\n            paste.call(this, ...arguments)\n          }\n      }\n\n    }\n\n  }, [])\n\n  return <>\n        <div>\n          <Typography variant='h5' align='center'>Phone Verification</Typography >\n          <Divider style={{ marginTop: 8 }} />\n          <Typography variant='h8' as=\"div\" sx={{ color: '#8e878f', marginTop: 1.9, marginBottom: 3 }} align='center'>Enter the OTP you received on 89206-6XXXXX</Typography>\n\n          <Box>\n\n            <OtpInput\n              value={otp}\n              onChange={handleChange}\n              numInputs={6}\n              ref={input}\n              isInputNum={true}\n              separator={<span>&nbsp;&nbsp;&nbsp;&nbsp;</span>}\n              containerStyle={{\n                justifyContent: 'center'\n              }}\n              inputStyle='input'\n              shouldAutoFocus={true}\n              \n            />\n\n          </Box>\n\n          <Box sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            p: 1,\n            m: 1,\n            bgcolor: 'background.paper',\n            color: blue[400]\n          }}>\n            <Box sx={{ p: 1,cursor: 'pointer' }}>Change Number</Box>\n            <Box sx={{ p: 1,  cursor: 'pointer' }}>Re-send OTP</Box>\n          </Box>\n\n          <Box sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            pt: 1,\n            m: 1,\n          }}>\n            <Button variant=\"contained\" sx={{ bgcolor: green[300], marginTop: 2, borderRadius: 15, paddingLeft: 5, paddingRight: 5 }} size=\"medium\">Verify Phone Number</Button>\n          </Box>\n\n        </div>\n    \n\n  </>\n}\n\n\n\nfunction App() {\n\n  const [open, setOpen] = useState(true);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n\n  const style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    boxShadow: 24,\n    bgcolor: 'white',\n    p: 4,\n  };\n\n  return (\n    <div>\n      <Box sx={{...style,bgcolor:'transparent',boxShadow:0,p:0,width:'auto'}}>\n        <Button onClick={handleOpen} variant=\"contained\" sx={{ bgcolor: green[300], marginTop: 2, borderRadius: 15, paddingLeft: 5, paddingRight: 5 }} size=\"medium\">Phone Verification</Button>\n      </Box>\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={style}>\n        <PhoneVerification />\n      </Box>\n    </Modal>\n    </div>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}